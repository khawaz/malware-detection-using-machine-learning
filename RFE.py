# automatically select the number of features for RFE
import numpy
import pandas
from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.feature_selection import RFECV
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline
from sklearn.utils.multiclass import type_of_target
from sklearn.preprocessing import LabelEncoder



# define dataset
file = pandas.read_csv("MalwareData.csv", sep = "|")
X = file.drop(["CheckSum","Name","md5","legitimate","VersionInformationSize"], axis=1)
Y = file["legitimate"]
# Dataset = file.values
#
# X = Dataset[ : , 2:-2]
# Y = Dataset[:, -1]
print(X.shape)


X = numpy.array(X).reshape(-1,52)
Y = numpy.array(Y).reshape(-1,1)

label_encoder = LabelEncoder()
Y = label_encoder.fit_transform(Y)

# create pipeline
rfe = RFECV(estimator=DecisionTreeClassifier())
model = DecisionTreeClassifier()
pipeline = Pipeline(steps=[('s',rfe),('m',model)])


# evaluate model
cv = RepeatedStratifiedKFold(n_splits=5, random_state=1)
n_scores = cross_val_score(pipeline, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)
# report performance
print('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))

rfe.fit(X, Y)
for i in range(X.shape[1]):
    print('Column: %d, Selected=%s, Rank: %d' % (i, rfe.support_[i], rfe.ranking_[i]))

