import tkinter as tk
from tkinter import *
import socket
import threading
import pickle
from PIL import ImageTk, Image
import tkinter.font as tkFont
import random
from datetime import datetime
from tkinter import ttk

modelname = "Random Select"

port = 8008
host_ip = 'localhost'
ADDR = (host_ip, port)

serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serverSocket.bind(ADDR)


def handle_client(conn, addr):
    print(f"New connection {addr} connected!")

    connected = True
    while connected:
        global modelname
        if modelname == "Random Select":
            modellist = ["Logistic Regression", "KNN", "Naive Bayes", "Decision Trees", "Random Forest",
                         "Neural Network"]
            random.seed(datetime.now().timestamp())
            num = random.random() * 10000
            x = num % 6
            modelname = modellist[int(x)]

        if modelname == "Logistic Regression":
            model = pickle.load(open("models/LogisticRegressionModel.pkl", 'rb'))
        if modelname == "KNN":
            model = pickle.load(open("models/KNNModel.pkl", 'rb'))
        if modelname == "Naive Bayes":
            model = pickle.load(open("models/NaiveBayesModel.pkl", 'rb'))
        if modelname == "Decision Trees":
            model = pickle.load(open("models/DecisionTreesModel.pkl", 'rb'))
        if modelname == "Random Forest":
            model = pickle.load(open("models/RandomForestModel.pkl", 'rb'))
        if modelname == "Neural Network":
            model = pickle.load(open("models/NNModel.pkl", 'rb'))

        print(modelname)
        input = conn.recv(1024)
        features = pickle.loads(input)
        prediction = model.predict_proba(features)
        output = pickle.dumps(prediction)
        conn.send(output)


def start():
    serverSocket.listen()
    while True:
        conn, addr = serverSocket.accept()
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()
        print(f"[Active Conncetions] {threading.active_count() - 1}")


class App:

    def __init__(self, root):
        root.title('SERVER_Malware Detection')
        root.geometry('800x400+300+200')
        root.config(bg='#fff')
        root.resizable(False, False)

        img = Image.open('Server Button/photo.jpg')
        img = img.resize((350, 350))
        img = ImageTk.PhotoImage(img)
        mainphotoLable = Label(root, image=img, bg='white')
        mainphotoLable.image = img
        mainphotoLable.place(x=420, y=25)
        root.iconbitmap("new gui images/Icon.ico")

        LSelect = Label(root, text="Select the model:", fg="#161415", bg="#fff", font=("Segoe UI Emoji", 12))
        LSelect.place(x=30, y=18)

        LR_img = Image.open('Server Button/Logistic Regression.png')
        LR_img = LR_img.resize((157, 45))
        LR_img = ImageTk.PhotoImage(LR_img)
        LR_B = Button(root, image=LR_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                      command=self.Button_LR_command)
        LR_B.image = LR_img
        LR_B.place(x=60, y=60)

        NB_img = Image.open('Server Button/Naive Bayes.png')
        NB_img = NB_img.resize((157, 45))
        NB_img = ImageTk.PhotoImage(NB_img)
        NB_B = Button(root, image=NB_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                      command=self.Button_NB_command)
        NB_B.image = NB_img
        NB_B.place(x=230, y=60)

        DT_img = Image.open('Server Button/Decision Trees.png')
        DT_img = DT_img.resize((157, 45))
        DT_img = ImageTk.PhotoImage(DT_img)
        DT_B = Button(root, image=DT_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                      command=self.Button_DT_command)
        DT_B.image = DT_img
        DT_B.place(x=60, y=115)

        KNN_img = Image.open('Server Button/KNN.png')
        KNN_img = KNN_img.resize((157, 45))
        KNN_img = ImageTk.PhotoImage(KNN_img)
        KNN_B = Button(root, image=KNN_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                       command=self.Button_KNN_command)
        KNN_B.image = KNN_img
        KNN_B.place(x=230, y=115)

        RF_img = Image.open('Server Button/Random Forest.png')
        RF_img = RF_img.resize((157, 45))
        RF_img = ImageTk.PhotoImage(RF_img)
        RF_B = Button(root, image=RF_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                      command=self.Button_RF_command)
        RF_B.image = RF_img
        RF_B.place(x=60, y=170)

        NN_img = Image.open('Server Button/Neural Network.png')
        NN_img = NN_img.resize((157, 45))
        NN_img = ImageTk.PhotoImage(NN_img)
        NN_B = Button(root, image=NN_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                      command=self.Button_NN_command)
        NN_B.image = NN_img
        NN_B.place(x=230, y=170)

        RSelect_img = Image.open('Server Button/Random Select.png')
        RSelect_img = RSelect_img.resize((208, 55))
        RSelect_img = ImageTk.PhotoImage(RSelect_img)
        RSelect_B = Button(root, image=RSelect_img, border=0, bg="#fff", fg="#fff", cursor='hand2',
                           command=self.Button_RSelect_command)
        RSelect_B.image = RSelect_img
        RSelect_B.place(x=119, y=240)

        LCrurrent = Label(root, text="Current model:", fg="#161415", bg="#fff", font=("Segoe UI Emoji", 12))
        LCrurrent.place(x=30, y=335)

        global current
        current = tk.StringVar()
        current.set("Random Select")

        OutEntry = Entry(root, textvariable=current, fg="#161415", bg="#ffffff", font=("Segoe UI Emoji", 12), border=0,
                         justify='left', state='disabled', disabledbackground="#ffffff", disabledforeground="#161415")
        OutEntry.place(x=138, y=337)

    def Button_RSelect_command(self):
        print("command RSelect")
        global current
        global modelname
        modelname = "Random Select"
        current.set("Random Select")

    def Button_LR_command(self):
        print("command LR")
        global model
        model = "LR"
        global current
        global modelname
        modelname = "Logistic Regression"
        current.set("Logistic Regression")

    def Button_NB_command(self):
        print("command NB")
        global model
        model = "NB"
        global current
        global modelname
        modelname = "Naive Bayes"
        current.set("Naive Bayes")

    def Button_NN_command(self):
        print("command NN")
        global model
        model = "NN"
        global current
        global modelname
        modelname = "Neural Network"
        current.set("Neural Network")

    def Button_KNN_command(self):
        print("command KNN")
        global model
        model = "KNN"
        global current
        global modelname
        modelname = "KNN"
        current.set("KNN")

    def Button_DT_command(self):
        print("command DT")
        global model
        model = "DT"
        global current
        global modelname
        modelname = "Decision Trees"
        current.set("Decision Trees")

    def Button_RF_command(self):
        print("command RF")
        global model
        model = "RF"
        global current
        global modelname
        modelname = "Random Forest"
        current.set("Random Forest")


if __name__ == "__main__":
    def run_GUI():
        root = Tk()
        app = App(root)
        root.mainloop()


    thread1 = threading.Thread(target=run_GUI)
    thread1.start()
    print("server is UP and Running!!")
    start()
